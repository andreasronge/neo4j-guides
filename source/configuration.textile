h2. Multitenancy, Upgrade, Admin, Configuration and Backup

endprologue.


h3. The Admin Console and Visualization

If you want to have the same admin console as in the neo4j server you can use the neo4j-admin gem.
Check the "neo4j-admin gem":https://github.com/andreasronge/neo4j-admin

Here is another console the "neo-viz gem":https://github.com/AmanziTel/neo-viz

h3. Multitenancy

You can split the graph database (and the lucene database) into separated parts by setting the reference node.

Example:

<ruby>
a = User.all[0] # could be any Neo4j node object
b = User.all[1]
Neo4j.threadlocal_ref_node = a  # store this in the current thread
 
Product.create(:name=>'p')
Product.all.size #=> 1
Product.find('name: p') #=> the product p

Neo4j.threadlocal_ref_node = b
Product.all.size #=> 0
Product.find('name: p') #=> nil
</ruby>

If you want to share data between different users, example:
<ruby>
class Shared < Neo4j::Rails::Model
  property :foo
  ref_node { Neo4j.default_ref_node }
end
</ruby>

When used from rails the thread context variable Neo4j.threadlocal_ref_node is automtically reset after each request (Rack Middleware). The same is true for lucene connections.

Multitenency is supported for both Neo4j::NodeMixin and Neo4j::Rails::Model.

For more information - http://blog.vivekprahlad.com/multitenancy-with-neo4jrb.

TIP: In Neo4j there is just one reference node. Neo4j.rb has support for having more than one reference node. Instead of returning the reference node from the Java API, neo4j.rb uses the thread local storage where the user can have his own node as a reference node. By doing that the lucene files will also be prefixed so that the lucene database is also split.

h3. Upgrade to a new Neo4j version

Some of the neo4j.rb releases includes a new version of the java neo4j library which requires a upgrade of the database since it has a different format.

* Version 1.3.1 uses Neo4j java library 1.6.0.M01
* Version 1.3.0 uses Neo4j java library 1.5.0
* Version 1.2.x uses Neo4j java library 1.4.1
* Version 1.1.x uses Neo4j java library 1.3
* Version 1.0.x uses Neo4j java library 1.3.M03

Also, see "Upgrade Neo4j":http://docs.neo4j.org/chunked/snapshot/deployment-upgrading.html

h4. How to upgrade for rails application

Make sure that you have shutdown the server cleanly. If not sure do this:
# Make sure the server is not running
# type @rails console@
# type in the console: @Neo4j.shutdown@

Run the script (after installing the new version of neo4j, gem install neo4j)

  neo4j-upgrade <location of db>

If you rather do this manually:
# Change your dependency to Neo4j in the Gemfile, e.g.
 @gem 'neo4j', '1.3.0'@
# type: @bundle update neo4j@
# type: @rails console@
# In the rails console: @Neo4j::Config[:allow_store_upgrade] = 'true'@
# In the rails console: @Neo4j.start@

Notice, in the neo4j.rb release 1.3.0 the filenames of the lucene indices was changed.
The neo4j-upgrade script will handle this and rename the lucene files.

h3. Backup

This feature is only available in the neo4j-enterprise edition.
Please add a dependency to the neo4j-enteprise gem and require it (in upcoming neo4j 2.0.0 release).

By setting the configuration @enable_online_backup@ to true (as a String)
For more info check "this":http://docs.neo4j.org/chunked/stable/operations-backup.html

IRB Example:

<pre>
> require 'neo4j'
> Neo4j.config[:enable_online_backup] = 'true'                   
> Neo4j::Transaction.run { Neo4j.ref_node[:ko] = 'fo'}          
I, [2011-02-16T12:36:47.196000 #28375]  INFO -- : Enable remote shell at port port=9332
I, [2011-02-16T12:36:47.207000 #28375]  INFO -- : Starting local Neo4j using db /home/andreas/projects/neo4j/lib/db
Wed Feb 16 12:36:48 CET 2011: BackupServer communication server started and bound to 6362
> org.neo4j.backup.OnlineBackup.from('localhost').full('/tmp/mynewbackup')
Wed Feb 16 12:36:52 CET 2011: Client connected to localhost:6362
Wed Feb 16 12:36:52 CET 2011: Opened a new channel to localhost/127.0.0.1:6362
 => #<Java::OrgNeo4jBackup::OnlineBackup:0x1bd5f28> 
</pre>


h3. Neo4j.rb configuration

The @Neo4j::Config@ class is used to configure neo4j. 
It uses "this":https://github.com/andreasronge/neo4j/blob/master/config/neo4j/config.yml file as default.
You can change or add any configuration property by using @Neo4j::Config[key]=value@.

You can also load configuration from your own file, example:
<ruby>
Neo4j::Config.default_file='/var/neo4j/config.yaml'
</ruby>

h4. Neo4j Java Configuration

The same YAML file is also used for the Java Neo4j configuration.
See "here":http://wiki.neo4j.org/content/Configuration_Settings

h3. Config Neo4j from Rails

When using Neo4j.rb from rails you can use the normal rails configuration to set Neo4j configuration.


Example @config/application.rb@ 

<ruby>
module Neo4jRailsExample
  class Application < Rails::Application
    ... 
    # Configure sensitive parameters which will be filtered from the log file.
    config.filter_parameters += [:password]
    
    # Neo4j configuration
    config.neo4j.storage_path = "#{config.root}/db/neo4j-#{Rails.env}"
  end
end
</ruby>

h3. JRuby Configuration

See "PerformanceTuning":https://github.com/jruby/jruby/wiki/PerformanceTuning

h3. Development and Testing configuration

h4. Travis

Neo4j.rb is using the "travis CI":http://travis-ci.org/#!/andreasronge/neo4j/


h4. Faster RSpecs

h5. Linux

You can create a RAM disk with 500MB like this: (the mount command needs to be issued as root)

<pre>
mkdir -p /tmp/neo4j_testing
mount -t tmpfs -o size=500M tmpfs /tmp/neo4j_testing
</pre>

h5. Mac

You can create a 550MB RAM disk like this:

<pre>
diskutil erasevolume HFS+ "ramdisk" `hdiutil attach -nomount ram://1165430`
</pre>

This will create a RAM disk under /Volumes/ramdisk

For both of these, in your spec_helper, you'll have to change the Neo4j config to use the RAM disk.
<pre>
Neo4j::Config[:storage_path] = /path/to/ram/disk
</pre>
You can use umount to unmount the ram disk on both platforms.

For more info, check "this":http://groups.google.com/group/neo4jrb/browse_thread/thread/b22fdebdc3a4b5ea

h4. Using RSpec and Guard

The flow for testing with this PR would be:

# Start the guard: bundle exec guard
# It'll run all specs.
# Got to you spec and start adding/changing.
# Save spec/related implementation file.
# The spec will be executed automatically.

If you want to concentrate on a single spec/example group, just add the <tt>:focus</tt> tag and only this spec will be executed by guard:

<ruby>
it "should do something", :focus do
  do_something
end
</ruby>

Additionally the following are included:

default <tt>.rspec</tt> config is added to make it easier to see the spec results with colours.
Growl 1.3 notifications (Mac only for now).

For more info, check "this pull request":https://github.com/andreasronge/neo4j/pull/85