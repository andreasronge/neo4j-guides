When used from rails the thread context is automtically clean after each request
h2. Multitenancy, Upgrade, Configuration and Backup

endprologue.

h3. Multitenancy

You can split the graph database (and the lucene database) into separated parts by setting the reference node.

Example:

<ruby>
a = User.all[0] # could be any Neo4j node object
b = User.all[1]
Neo4j.threadlocal_ref_node = a  # store this in the current thread
 
Product.create(:name=>'p')
Product.all.size #=> 1
Product.find('name: p') #=> the product p

Neo4j.threadlocal_ref_node = b
Product.all.size #=> 0
Product.find('name: p') #=> nil
</ruby>

If you want to share data between different users, example:
<ruby>
class Shared < Neo4j::Rails::Model
  property :foo
  ref_node { Neo4j.default_ref_node }
end
</ruby>

When used from rails the thread context variable Neo4j.threadlocal_ref_node is automtically reset after each request (Rack Middleware). The same is true for lucene connections.

Multitenency is supported for both Neo4j::NodeMixin and Neo4j::Rails::Model


TIP: In Neo4j there is just one reference node. Neo4j.rb has support for having more than one reference node. Instead of returning the reference node from the Java API, neo4j.rb uses the thread local storage where the user can have his own node as a reference node. By doing that the lucene files will also be prefixed so that the lucene database is also split.

h3. Upgrade to a new Neo4j version

Some of the neo4j.rb releases includes a new version of the java neo4j library which requires a upgrade of the database since it has a different format.

* Version 1.2.x uses Neo4j java library 1.4.1
* Version 1.1.x uses Neo4j java library 1.3
* Version 1.0.x uses Neo4j java library 1.3.M03

See "Upgrade to 1.4":http://docs.neo4j.org/chunked/1.4/deployment-upgrading.html

h4. How to upgrade for rails application

# stop the server
# type @rails console@
# type in the console: @Neo4j.shutdown@
The reason is that you must make sure that it shutsdown cleanly.
# Change your dependency to Neo4j in the Gemfile, e.g.
 @gem 'neo4j', '1.2.0'@
# type: @bundle update neo4j@
# type: @rails console@
# In the rails console: @Neo4j::Config[:allow_store_upgrade] = 'true'@
# In the rails console: @Neo4j.start@

h3. Backup

By setting the configuration @online_backup_enabled' to true 
the Neo4j::OnlineBackup class will be available.
This class is an alias of the java class @org.neo4j.backup.OnlineBackup@
For more info check "this":http://docs.neo4j.org/chunked/stable/operations-backup.html



IRB Example:

<pre>
> require 'neo4j'
> Neo4j.config[:online_backup_enabled] = true                   
> Neo4j::Transaction.run { Neo4j.ref_node[:ko] = 'fo'}          
I, [2011-02-16T12:36:47.196000 #28375]  INFO -- : Enable remote shell at port port=9332
I, [2011-02-16T12:36:47.207000 #28375]  INFO -- : Starting local Neo4j using db /home/andreas/projects/neo4j/lib/db
Wed Feb 16 12:36:48 CET 2011: BackupServer communication server started and bound to 6362
> Neo4j::OnlineBackup.from('localhost').full('/tmp/mynewbackup')
Wed Feb 16 12:36:52 CET 2011: Client connected to localhost:6362
Wed Feb 16 12:36:52 CET 2011: Opened a new channel to localhost/127.0.0.1:6362
 => #<Java::OrgNeo4jBackup::OnlineBackup:0x1bd5f28> 
</pre>

You can also do an incremental: @Neo4j::OnlineBackup('localhost').incremental('location')@

h3. Neo4j.rb configuration

The @Neo4j::Config@ class is used to configure neo4j. 
It uses "this":https://github.com/andreasronge/neo4j/blob/master/config/neo4j/config.yml file as default.
You can change or add any configuration property by using @Neo4j::Config[key]=value@.

You can also load configuration from your own file, example:
<ruby>
Neo4j::Config.default_file='/var/neo4j/config.yaml'
</ruby>

h4. Neo4j Java Configuration

The same YAML file is also used for the Java Neo4j configuration.
See "here":http://wiki.neo4j.org/content/Configuration_Settings

h3. Config Neo4j from Rails

When using Neo4j.rb from rails you can use the normal rails configuration to set Neo4j configuration.


Example @config/application.rb@ 

<ruby>
module Neo4jRailsExample
  class Application < Rails::Application
    ... 
    # Configure sensitive parameters which will be filtered from the log file.
    config.filter_parameters += [:password]
    
    # Neo4j configuration
    config.neo4j.storage_path = "#{config.root}/db/neo4j-#{Rails.env}"
  end
end
</ruby>

h3. JRuby Configuration

See "PerformanceTuning":http://kenai.com/projects/jruby/pages/PerformanceTuning
