h2. Indexing and Quering with Lucene


endprologue.

h3. Index

In order to perform a query you must declare an index on the fields.
A Lucene index can be declared on nodes and relationships and Neo4j::Model classes.

Example:

<ruby>
  class Person
    include Neo4j::NodeMixin
    index :name
  end
</ruby>    

After each transaction finishes the Person will be indexed.

<ruby>
Neo4j::Transaction.run do
  Person.new :name => 'andreas'
end
</ruby>    

The full lucene query syntax is available, see "here":http://lucene.apache.org/java/3_0_2/queryparsersyntax.html

<ruby>
  Person.find('name: andreas').first #=> andreas
</ruby>    

h4. Neo4j::RelationshipMixin

Works as indexing on Neo4j::NodeMixin

h3. Fulltext and Exact

By default indexes are of type @:exact@ which is great for indexing keywords etc.
To index each word in a text you should use a fulltext index. Fulltext uses white-space tokenizer in its analyzer. Add the type @:exact@ when you declare the index *and* in the find method.

Example:

<ruby>
  class Person
    include Neo4j::NodeMixin
    index :name, :type => :fulltext
  end
</ruby>    

<ruby>
  Person.find('name: andreas', :type => :fulltext).first #=> andreas
</ruby>    

h3. Indexing Related Nodes (Shared Index)

Two or more classes can share the same index. For example, let say we have two classes Person and Phone and
each person can have several phone number nodes.

Example:
<ruby>
  class Person
     include Neo4j::NodeMixin
     has_n :phones
     index :name
  end
</ruby>    

<ruby>
  class Phone
     include Neo4j::NodeMixin
     index :number
  end   
</ruby>    

With the example above we can only query and find Phone nodes. If we want to query both the Person and Phone nodes we should use the ''via''
key word.

Example
<ruby>
   class Phone  # forward declaration, needed below
      include Neo4j::NodeMixin
   end
</ruby>    

<ruby>
   class Person
      include Neo4j::NodeMixin
      has_n(:phones).to(Phone)
      index :name
   end
</ruby>    

<ruby>
   class Phone
      has_n(:people).from(Person, :phones)  # several people can have the same phone number
      index :number, :via => :people
   end   
</ruby>    

We can now do a query on the Person class instead.

Example
<ruby>
  Person.find('name: *smith AND phone: "040*")
</ruby>    

*Gotchas*

# You can only index incoming relationship
# You must declare both direction with to and from in a has_n or has_one.

h3. Reuse an Indexer (Shared Index)

You can specify that a class should use the same lucene indexx as another class.

Example
<ruby>
  class Employee
    property :employee_id
    node_indexer Person
    index :employee_id
  end
</ruby>    

The Employee and Person class now shares the same index. That means that you can search on indexes declared
in both the Person and Employee classes.

h3. Query Syntax

Neo4j/Lucene support a wide range of queries
* Wildcard searches
* Fuzzy searches
* Proximity searches
* Range searches

For information of the syntax see "here":http://lucene.apache.org/java/3_0_2/queryparsersyntax.html

h3. Sort Order

It is only possible to sort on :exact indexes. Sorting on :fulltext index is not possible.
Sort order is specified with the *asc* and *desc* method.

Example:
<ruby>
Person.find('email: *@gmail.com').asc(:email, :age) # sort by ascending order email&age
Person.find('email: *@gmail.com').asc(:name, :age).desc(:email)
</ruby>    

By default fields are sorted as Strings. If you want to sort as integer (Fixnum) you have to declare the type first, see below.

h3. Numerical Fields

In order to support sort order and range queries on Fixnum, Float and Date queries you need
to specify that the field will be indexed as a numerical field.

Example:

<ruby>
class Person
  include Neo4j::NodeMixin
  property :age, :type => Fixnum
  index :age
</ruby>    

h3. Range Queries

<ruby>
  Person.find(:height).between(1.52, 1.87)
</ruby>    

You must declare the property unless you want to perform a range query on Strings.

<ruby>
Person.find(:age => 49..52)
Person.find(:age => 49...52)
</ruby>

h4. Date and DateTime Range Queries

If you specify a :type of Date or DateTime it will be translated into an Fixnum.

<ruby>
class Person
  include Neo4j::NodeMixin
  property :born, :type => Date
  index :born
end

Person.find(:born => Date.today - 5 .. Date.today)
</ruby>    
 
h3. Compound Queries

<ruby>
  Person.find(:name => 'foo').and(:age).between(10,20)
  # same as
  Person.find(:name => 'foo', :age => 10..20)
</ruby>    

Only @and@ queries are currently supported.

h3. Date Queries

<ruby>
  class Person
    property :born, :type => DateTime
    index :born
  end
  Person.find(:born).between(Date.today, 5.years.ago)
</ruby>    
    
Both @Date@ and @DateTime@ are supported.
The DateTime values will automatically be converted into UTC timezone.
    
h3. Type Conversion

Neo4j has support for converting DateTime and Date to Java long values.
You can create your own type conversion, read:
"TypeConverters":http://neo4j.rubyforge.org/classes/Neo4j/TypeConverters.html

h2. Performance and Configurations

h3. Lucene Configuration 

It is possible to create your own lucene configuration.
Example, see the configuration for fulltext and exact indexing in the Neo4j::Config[:lucene]
You can add your own lucene indexing configuration in the Neo4j::Config and use it with the index keyword.

<ruby>

  Neo4j::Config[:lucene][:my_index_type] = ...
  
  class Person
     index :name, :type => :my_index_type
  end
</ruby>    


h3. Indexing and Query Before Commit

When you declare an index it will make sure that the neo4j property and the lucene index will be synchronized.
This happens when the transaction commits.
If you want to index properties before the transaction commits you can do it yourself.

Example (from RSpec):

<ruby>
    new_node = Neo4j::Node.new
    new_node[:name] = 'Kalle Kula'
    new_node.add_index(:name)
    new_node.rm_index(:name)
    new_node[:name] = 'lala'
    new_node.add_index(:name)
    Neo4j::Node.find('name: lala').first.should == new_node
    Neo4j::Node.find('name: "Kalle Kula"').first.should_not == new_node
</ruby>    

h3. Optimization

If you are looping thru a lot of nodes you might get better performance by not loading the Ruby wrappers
around the Java nodes.

<ruby>
  Person.find('name: andreas', :type => :fulltext, :wrapped => false)
</ruby>    

When using the @:wrapped => false@ parameter the find method will return a Java @org.neo4j.graphdb.index.IndexHit@ instance
(which works like an Ruby Enumerable so you can use the normal each, collect etc.. methods)

