h2. Rails 3 / Active Model support

endprologue.


Developed by "Nick Sieger":http://github.com/nicksieger/neo4j-rails and extended 
and included in Neo4j.rb by Andreas Ronge and Ben Jackson. You no longer need the neo4j-rails gem.


TIP: Notice that you can use the  @Neo4j::Model@ in a standalone application or Sinatra application. It is also possible to use the @Neo4j::NodeMixin@ or @Neo4j::Node@ in a Rails application instead of the @Neo4j::Model@, see the other guides: "Neo4j Mapping Guide":mapping.html and "Node, Relationships and Properties":basic.html

h3. Usage

The @Neo4j::Model@ implements the Rails ActiveModel interface and a subset of the ActiveRecord API. 

Example:

<ruby>
class IceCream < Neo4j::Model
  property :flavour
  validates_presence_of :flavour
end

IceCream.new.valid?  # => false
IceCream.new(:flavour => "vanilla").valid?  # => true
</ruby>

The @new@ method does not create a new node in the database (unlike  @Neo4j::NodeMixin#new@) but instead behaves like ActiveRecord the @new@ method. The node will be saved to the database when the @save@ method is called.


h3. Neo4j::Rails::Model

A @Neo4j::Rails::Model@ object represent a "node":http://neo4j.rubyforge.org/guides/basic.html. It includes the "Neo4j::NodeMixin":http://neo4j.rubyforge.org/classes/Neo4j/Mapping/NodeMixin.html .For more information see the "Neo4j Mapping Guide":mapping.html.
The @Neo4j::Rails::Model@ is Active Model compliant and does implement some Active Record method.

h4. Callbacks

The following callbacks are defined: *create* *save* *update* *destroy* *validate*
See the "rails documentation":http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html when they are called.



h4. Model.new

The @Neo4j::Model.new@ methods does not require a transaction (unlike the @Neo4j::Node.new@ method)
since it creates a node in memory with no connection to the neo4j database.
This makes it easier to create forms that don't touch the database if validation fails by using
the ActiveRecord-style two-step @Model.new@ + @Model#save@ creation.

h4. Model.save

Saves the node if the validation was successful. It will create a new transaction if neccessarly.
Notice, also nested nodes will be saved (created by has_n, has_one, or outgoing).
Validation can be skipped by @model.save( :validate => false )@

h4. Model.update_attributes

Updates the model with the given attributes and saves the model if the validation is successful.
Will create a new transaction if neccessarly.

h4. Model.property

The @Neo4j::Model#property@ method accept additional configuration parameters:, @:default@, @:length@ and @:null@ and @:type@

Example:
<ruby>
class MyModel < Neo4j::Rails::Model
  # gives title "Mr" unless it is set specifically
  # ensures it is a maximum of 3 chars long
  # ensures it is never saved with a nil value
  property :title, :default => "Mr", :limit => 3, :null => false
  property :superuser, :foo, :type => :boolean  # both superuser and foo will be converted to true/false values
end
</ruby>

h4. Validation

All the normal validations work.
Example:
<ruby>
class Person < Neo4j::Model
  index :email
  validates :email, :uniqueness => true
  validates :password, :presence     => true,
                   :confirmation => true,
                   :length       => { :within => 6..40 }
end
</ruby>

In order to get uniquess validation to work you *must* have an exact index on the property, as shown above (*index :email*)

h3. Neo4j::Rails::Relationship

A @Neo4j::Rails::Relationship@ object represent a "relationship":http://neo4j.rubyforge.org/guides/basic.html. It includes the "Neo4j::RelationshipMixin":http://neo4j.rubyforge.org/classes/Neo4j/Relationship.html .For more information see the "Neo4j Mapping Guide":mapping.html. The @Neo4j::Rails::Relatioship@ is Active Model compliant and does implement some Active Record method. That means that things like Active Model validation and callbacks works, just like @Neo4j::Rails::Model@



h4. Create with .outgoing(:reltype) <<

You do not need to declare a relationship with a has_n Neo4::Rails::Model class method.
Instead you can at anytime add any time of relationship between two nodes.
<ruby>
n1 = Neo4j::Rails::Model.new
n2 = Neo4j::Rails::Model.new
n1.outgoing(:friends) << n2
n1.save
</ruby>

Notice that you can also create the samething on incoming relationship.
The example above can also be written like this:

<ruby>
n2.incoming(:friends) << n1
n2.wsave
</ruby>

Notice you must call *save* in order to persist the relationship do disk.

h4. Create with Neo4j::Rails::Relationship

The @outgoing@ method from the example above does not return a relationship object since it allows to chain several nodes with the << operator (creating several relationship in one line).
If you want to set properties on the relationship it's more convinient to create it with the @Neo4j::Rails::Relationship@

<ruby>
# create a relationship with one property
rel = Neo4j::Rails::Relationship.new(:type, n1, n2, :since => 1942)
# add another property on the relationship
rel[:foo] = "bar"
# Don't forget to save it
rel.save
# or create and save it in one go
rel = Neo4j::Rails::Relationship.create(:type, n1, n2, :since => 1942, :foo => 'bar')
</ruby>

TIP: You can of course also subclass the @Neo4j::Rails::Relationship@ class just like for @Neo4j::Rails::Model@ class to specify domain specific behavour (e.g. validations, callbacks, business logic etc.)


h4. Create with a has_n/has_one accessor method

The has_n and has_one class methods can generate some convenience method for creating and traversing relationships and nodes.
Validation will only be performed on each nested node if the @validates_associated@ is specified, see below.

<ruby>
class Person << Neo4j::Rails::Model
  has_n(:friends)
end

p1 = Person.new  # or Person.create
p2 = Person.new
p1.friends << p2
p1.save # => true
</ruby>

Notice that you can combine using @friends@ and the @outgoing@ / @incoming@ methods.
These methods may all return both saved and unsaved nodes.

Example:
<ruby>
a.friends << b
a.outgoing(:friends).first # => nil
a.save
a.friends << c
d.incoming(:friends) << a
a.outgoing(:friends).to_a # =>[b,c,d]
</ruby>

TIP: Use @ModelClass.relationship@ when specifying relationship name. Instead of the example above write @a.outgoing(Person.friends)@. The reason is that the relationship is prefixed if it is specified with a @to@ node. Example @Person.has_n(:friends).to(Person)@

h4. Create with friends.build and friends.create

Just like Active Record you can create relationship like this:

<ruby>
a.friends.build(property_hash)
a.friends.create(property_hash)
</ruby>

h4. Create with  Nested Attributes

Neo4j.rb supports "accepts_nested_attributes_for":http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html which can be used to create relationship between nodes.

The following configuration option are available

*  @:allow_destroy@ If true, destroys any members from the attributes hash with a _destroy key and a value that evaluates to true (eg. 1, ‘1’, true, or ‘true’). This option is off by default.
*  @:reject_if@ Allows you to specify a Proc or a Symbol pointing to a method that checks whether a record should be built for a certain attribute hash. The hash is passed to the supplied Proc or the method and it should return either true or false. When no :reject_if is specified, a record will be built for all attribute hashes that do not have a _destroy value that evaluates to true. Passing :all_blank instead of a Proc will create a proc that will reject a record where all the attributes are blank.

When using the @accepts_nested_attributes_for@ class method you must specify which class the relationship correspond to
by using the @to@ method in @has_one@ or @has_n@.

*Example*

<ruby>
class Member < Neo4j::Model
  has_n(:posts).to(Post)
  has_one(:avatar).to(Avator)

  accepts_nested_attributes_for :avatar, :allow_destroy => true
  accepts_nested_attributes_for :posts, :reject_if => proc { |attributes| attributes[:title].blank? }
end

</ruby>


h4. Traversing Nodes

You can access nodes with the same method that creates relationship: @outgoing@, @incoming@ and the has_n and has_one accessor methods.
All these methods returns an object thats includes the Ruby Enumerable mixin (which means you can use each, collect, find etc).

Example
<ruby>
m = Member.find(42)
m.outgoing(:posts).find_all{|post| post.keyword == 'ruby'}
# or
m.posts.find_all{|post| post.keyword == 'ruby'}
</ruby>

h4. Traversing with depth > 1

You can do complex traverals using the @incoming@ @outgoing@ methods, see "here":http://neo4j.rubyforge.org/guides/traverser.html
A common pattern is to first use a lucene query and from that do a traversal to find a search result.

TIP: Notice when traversing nodes of depth > 1 (@node.outgoing(:foo).depth(2)@) only persisted nodes will be returned. Using the outgoing or incoming method without a depth (@node.outgoing(:foo)@) it will return both persisted and unsaved nodes.

h4. Accessing Relationships

The has_one and has_n method also generate accessors for getting the relationship objects.

<ruby>
m = Member.find(42)
m.posts_rels.to_a #=> an array of all type Neo4j::Rails::Relationship (or subclass of that).
m.avatar_rel #=> an object of  type Neo4j::Rails::Relationship (or subclass of that).
</ruby>

You can also access any relationship using the rels and rel method, see "here":http://neo4j.rubyforge.org/guides/basic.html#accessing-relationships

h4. Validation

Validation of relationships and nodes for the friends relationship above will not be performed unless @validates_associated@ is specified.
Example:
<ruby>
class Person
  property :name
  validates_presence_of :name
  has_n :friends
  validates_associated :friends
end
</ruby>

If an validation error occurs the errors will be aggregated on the 'root' object
(in the example above that is p1.errors).

h4. Finding Relationships

The has_n accessor method allows you to find relationships.
Example:
<ruby>
  p1 = Person.create(:name => 'p1')
  p2 = Person.create(:name => 'p2')
  p3 = Person.create(:name => 'p3')

  p1.friends << p2 << p3
  p1.save

  # find the relationship object between p1 and p3
  rel = p1.friends.find(p3)
  # set a property on this relationship
  rel[:since] = 1998
  rel.save
</ruby>

The find method also accepts a block (just the normal Ruby Enumerable#find method).

You can also find relationship using the @friends_rels@ method or the @rels@ method.
<ruby>
  rel = p1.rels(:friends).find{|rel| rel.end_node == p3}
</ruby>

For more info about the rels method read "here":http://neo4j.rubyforge.org/guides/basic.html#accessing-relationships

h4. destroy and delete

The destroy and delete method works like the Active Record methods.

<ruby>
  rel = p1.rels(:friends).find{|rel| rel.end_node == p3}
  rel.destroy

  p1.friends.find(p2).delete
</ruby>

You can also delete the relationship object like this.

<ruby>
  p1.friends.delete(p2)
</ruby>


h4. delete_all and destroy_all

You can destroy and delete all relationship in one go (just like Active Record).

<ruby>
  p1.friends.destroy_all
</ruby>

h4. has_list

The @has_list@ is not wrapped in @Neo4j::Model@. That means that you have to create a transaction 
when you want to modify the list, for more info see "Mapping nodes/relationships to Ruby classes":mapping.html#has_list


h3. Mapping Nodes and Relationships

You can subclass both the Neo4j::Rails::Model and Neo4j::Rails::Relationship classes and specify the relationship between those.
Remember that you can also do this without any declaration at any time (just like for declaring properties or just setting them 
with the [] operator).

Let say you want to express the domain that an Actor has a Role to a Movie. 
Example create three files and put them in the @app/model@ folder.

*app/models/role.rb*
<ruby>
class Role < Neo4j::Rails::Relationship
  property :title, :character
  index :title

  # Notice that you can add validation and callbacks in this class !
end
</ruby>

*app/models/actor.rb*
<ruby>
class Actor < Neo4j::Rails::Model
  property :name
  has_n(:acted_in).to(Movie).relationship(Role)
  index :name
end
</ruby>


*app/models/movie.rb*
<ruby>
class Movie < Neo4j::Rails::Model
  property :title
  property :year

  # defines a method for traversing incoming acted_in relationships from Actor
  has_n(:actors).from(Actor, :acted_in)

  index :title
  index :year
end
</ruby>

Now, when you create a relationship between actor and role it will be of type Role.
Example:
<ruby>
an_actor = Actor.find(42)
an_actor.acted_in << a_film
an_actor.acted_in_rels.first #=> a Role object

# or
role = an_actor.acted_in.create(:title => 'The Matrix')
role.character => 'neo'
role.save
</ruby>

You can now also navigate the incoming direction since we declared @has_n(:actors).from(Actor, :acted_in)@
<ruby>
  matrix.actors.to_a #=> all the actors in that film
</ruby>

Neo4j.rb will prefix relationships when they are declared with to (@has_n(:frineds).to@). 
Example:
<ruby>
actor = Actor.create
actor.acted_in << movie1
actor.outgoing(:acted_in) << movie2
actor.outgoing(:acted_in) # only include movie2
actor.outgoing(Actor.acted_in) # only include movie1
</ruby>

TIP: By not specifying which class the relationship is associated to (using the @to@ method above) gives you more freedom. If you instead just declared @Actor.has_n(:acted_in)@ then an actor can have an acted_in relationship to different classes. Example @an_actor.acted_in << Neo4j::Rails::Model.new() << Thingy.create. 


h3. Querying

The @find@ and @all@ methods use the model's Lucene index to search for either one or a set of nodes respectively. Make sure to index the properties that you'll query on.

*Example Setup*
<ruby>
class IceCream < Neo4j::Model
  property :flavour
  property :cone

  index :flavour
  index :cone
end
</ruby>

<ruby>
vanilla_sugar = IceCream.create(:flavour => 'vanilla', :cone => 'sugar')
vanilla_waffle = IceCream.create(:flavour => 'vanilla', :cone => 'waffle')
</ruby>

h4. Find

The @find@ method will find the first node that matches its query or @nil@ if one isn't found.

<ruby>
IceCream.find('cone: sugar') #=> vanilla_sugar
IceCream.find('flavour: vanilla') #=> who knows?
IceCream.find(:flavour => 'vanilla') #=> same as above
IceCream.find('flavour: chocolate') #=> nil
</ruby>

The @find@ method will also accept a Neo4j node id which is useful for finding a node in a rails controller.

<ruby>
class IceCreamController < ApplicationController
  
  def show
    @ice_cream = IceCream.find(params[:id])
    # . . .
  end

end
</ruby>


The Neo4j::Model also support Active Record like query syntax:

<ruby>
Model.find(:first, :conditions => { :name => "test" }) # works the same as find("name: \"test\"")
Model.find(:first, :conditions => { :id => 10 }) # works the same as find(10) or find("10")
</ruby>

For more information about indexing and quering, see "Indexing and Quering with Lucene":lucene.html

h4. All

The @all@ method will find a set of nodes or relationship. If none is find it will return an empty array.

<ruby>
IceCream.all #=> [vanilla_sugar, vanilla_waffle]

IceCream.all('flavour: vanilla') #=> [vanilla_sugar, vanilla_waffle]

IceCream.all('flavour: vanilla AND cone: sugar') #=> [vanilla_sugar]

IceCream.all('flavour: chocolate') #=> []
IceCream.all(:flavour => 'chocolate')
IceCream.find(:all, :condition => {:flavour => 'chocolate'}, :sort => {:name => :asc})
</ruby>

Tip: String parameter values with special characters, such as URI's, should be escaped first before setting or querying to not conflict with the Lucene Query Parser Syntax:  + - && || ! ( ) { } ^ " ~ * ? : \ . See "Apache Lucene - Query Parser Syntax":http://lucene.apache.org/java/2_4_0/queryparsersyntax.html

<ruby>
	escaped = URI.escape( "http://neo4j.rubyforge.org/guides", Regexp.new( "[^#{URI::PATTERN::UNRESERVED}]" ))
	Website.find("uri: #{escaped}")
</ruby>
	
or using String#gsub

<ruby>
	escaped = "http://neo4j.rubyforge.org/guides".gsub( /([\+\-\&\|\!\(\)\{\}\[\]\^\"\~\*\?\:\\])/ , "\\\1" )
</ruby>

TIP: The @all@ method also work for subclasses for Neo4j::Rails::Model (but as expected for subclasses of Neo4j::Rails::Relationship).

h4. Fulltext Search

An example of using the lucene full text search index:
<ruby>
class BlogEntry < Neo4j::Rails::Model
  property :text
  index :text, :type => :fulltext
end

e = BlogEntry.create(:text => 'some long text string')

BlogEntry.find('text: long', :type => :fulltext) #=> e
BlogEntry.all('text: long', :type => :fulltext).size #=> 1
</ruby>

Notice that you need to specify the @:fulltext@ configuration property for both declaring the index and searching.

h4. Dynamic Finders

If you declare an index you neo4j.rb will generate finder methods for you.

Example:
<ruby>
class Person
  property :name
  index :name
end

Person.find_by_name 'andreas'  # with underscore of course, not visible

</ruby>


h4. Sorting

Examples:
<ruby>
Person.all('name: Test*').asc(:name).desc(:age)
Person.find(:all, 'name: Test*', :page => 2, :per_page => 2, :sort => {:name => :asc}
Person.first(:conditions => 'name: Test*', :sort => {:name => :asc})
</ruby>

You can add a paginate prefix and it will be paginated (need to specify :page and :per_page parameters).

h4. Range Queries

Does work on String, Fixnum, Float, Date and DateTime, see the "Lucene Queries":lucene.html

h3. Timestamps

If a @Neo4j::Rails::Model@ or a @Neo4j::Rails::Relationship@ class (or subclass) has the property @updated_at@ or @created_at@ then 
it will be timestamped. This is all that is required.

<ruby>
class Role < Neo4j::Rails::Relationship
  property :updated_at
  property :created_at
end
</ruby>

That's all you need to do. If you want to disable this behaviour check the configuration below.

h3. API

Many of the familiar API methods from ActiveRecord are duplicated in Neo4j::Model. Neo4j::Model includes 
* ActiveModel::Validations
* ActiveModel::Conversions
* ActiveModel::Callbacks
* ActiveModel::Dirty
* ActiveModel::MassAssignmentSecurity
* ActiveModel::Serializers::Xml
* ActiveModel::Serializers::JSON
* ActiveRecord::Timestamp (@created_at@ and/or @updated_at@)

Methods:
<ruby>
class Neo4j::Model
  def valid?; end
  def save; end
  def save!; end
  def persisted?; end
  def update_attributes(attributes); end
  def update_attributes!(attributes); end
  def destroy; end
  def delete; end
  def all; end
  def attributes=(attrs); end
  def self.all; end
  def self.destroy_all; end
  def self.find(*); end
  def self.create(attributes); end
  def self.create!(attributes); end
  def self.transaction(&lock); end
  def self.accepts_nested_attributes_for(*); end
  def self.has_n; end
  def self.has_one; end
end
</ruby>


h3. Neo4j::Rails::Transaction

All write operations requires a transaction. Read operations like find,load or read properties does not require transactions.
The Neo4j::Rails::Model and Neo4j::Rails::Relationship classes does automatically create transaction if needed. If you need to write several operations in one operation use @Neo4j::Rails::Transaction@. You will also get better performance using a single transaction instead of several small transactions.

h4. Transaction and around_filter

This class can be used as a filter in order to wrap methods in one transactions.

Example:
<ruby>
class UsersController < ApplicationController
  around_filter Neo4j::Rails::Transaction, :only => [:create]
</ruby>

The @Neo4j::Rails::Transaction@ class can also be used to access the current running transaction in order
to signal for a rollback.

Example:
<ruby>
class UsersController < ApplicationController
   around_filter Neo4j::Rails::Transaction, :only => [:create, :update]

   def update
     #.. create, update delete some nodes/relationships
     #.. something when wrong, rollback everyting
     Neo4j::Rails::Transaction.current.fail
   end
</ruby>

h4. Model#transaction

Notice that you can also use the @Model.transaction@ method to wrap a block of code in a transaction.

Example:
<ruby>
class UsersController < ApplicationController
  def update
    Users.transaction do |tx|
      #.. create, update delete some nodes/relationships
      #.. something when wrong, rollback everyting
      tx.fail
    end
  end
</ruby>


h3. Rails Generators

You can use the standard Rails 3 generators to create your models, controllers, routes, tests and views, by passing 'neo4j' as the ORM for generators to use:

<pre>> rails generate scaffold User name:string born:date --orm=neo4j</pre>

You can also set up your application configuration to use neo4j as the default ORM for generating templates.  Simply add the following to your application's Rails configuration.  This example also favours RSpec and specifies that fixtures are not to be created:

<pre>config.generators do |g|
  g.orm             :neo4j
  g.test_framework  :rspec, :fixture => false
end</pre>

Then you can simply call generators as normal without having to specify the ORM:

<pre> rails generate model Admin --parent User</pre>

To undo what was just generated:

<pre> rails destroy model Admin</pre>

To create a model with timestamps:

<pre>rails generate scaffold Post title:string --timestamps</pre>

h4. Rails Neo4j Project Template

Example of creating an Neo4j Application from scratch, type

<pre>
gem install rails
rails new myapp -m http://andreasronge.github.com/rails3.rb
cd myapp
bundle
rails generate scaffold User name:string email:string
rails s
</pre>
open a webbrowser: http://localhost:3000/users

h3. Installation and Configuration

If you don't want to use the Neo4j Project template above you can do it yourself.

h4. Replace ActiveRecord with Neo4j

Edit the config/application.rb
comment the line require 'rails/all' and add
<ruby>
require "action_controller/railtie"
require "action_mailer/railtie"
require "active_resource/railtie"
require "rails/test_unit/railtie"
require 'neo4j'
</ruby>

h4. Include Dependency to Neo4j

Add the following line to your Gemfile
<code>
gem 'neo4j', '1.0.0'
</code>
and remove all sql gems. Install the gems specified in your Gemfile @bundle install@

h4. Configuration

You can set the location of the database in the @config/application.rb@ file.
Example:

<ruby>
config.neo4j.storage_path = "#{config.root}/db/neo4j-#{Rails.env}"
config.neo4j.timestamps = false  # disable automatic timestamps on updated_at and created_at properties
</ruby>


h4. Deployment

* Installing JRuby - see "RVM":http://rvm.beginrescueend.com/
* "Tomcat/Trinidad":https://github.com/calavera/trinidad
* "Glassfish App Server":http://www.scottlowe.eu/deploying-rails-3-with-jruby-15-daemonized-gl

Trinidad needs the Java jar files in the lib folder.
There is a script for doing this:
<pre>
neo4j-jars -local
</pre>
Just type @neo4j-jars@ for help

If you forget to add those jar files to your rails project you may get the following error message:
<pre>
No index provider 'lucene' found
</pre>

h3. Backup

See "Configuration & Backup":configuration.html

Add the following line in your config/application.rb file:

<pre>
config.neo4j.online_backup_enabled = true
</pre>

Then add the correct jar files to the lib folder:

<pre>
neo4j-jars -backup
</pre>

To perform the backup
<ruby>
require 'neo4j'
Neo4j.load_online_backup
Neo4j::OnlineBackup('localhost').incremental('/var/backup')
</ruby>

h3. HA Cluster


Add the following line in your config/application.rb file:

<pre>
config.neo4j['ha.db']=true
</pre>

Then add the correct jar files to the lib folder:

<pre>
cd YOUR_RAILS_ROOT
neo4j-jars -ha
</pre>

h3. Integration with other Rails Gems

h4. devise

See the "devise-neo4j gem":http://github.com/benjackson/devise-neo4j and
"devise_example":http://github.com/andreasronge/devise_example

h4. will_paginate

First you need to include the will_paginate gem, edit your Gemfile
<pre>
  gem "will_paginate", "~> 3.0.pre2"
</pre>
and add in the config/application.rb file
<pre>
  require 'will_paginate'
</pre>

In your controller paginate the traversal or search result.
Example
<ruby>
 def index
   # Example 1, with lucene query does support sorting !
   @users = User.paginate(:all, 'name: P*', :total_entries => 100,:page => params[:page], :per_page => 3)
   # Example 2, with traversal, does not support sorting
   @users = User.all.paginate(:page => params[:page], :per_page => 3)
 end    
</ruby>

In the view.
<erb>
<%= will_paginate(@users) %>
</erb>

h3. FAQ

h4. Why do I get @ERROR IOError: Connection reset by peer@ ?

It's a JRuby bug which is solved in JRuby version >= 1.6

h4. I get "No index provider 'lucene' found"

See deployment above.

h4. org.neo4j.kernel.impl.core.ReadOnlyDbException

You get this exception if there is already an neo4j db instance running.
Only one write instance of the database is possible. If there is already a write instance running then a read only db will be created.
Did you run the rails console before you did the first request to rails ?

h4. Why can't I update nested models: node.nested << x; node.nested.save ?

Let say you have the following class:

<ruby>
class Person < Neo4j::Rails::Model
  has_one(:nested)
end

node = Person.create
node.nested = Person.create
node.save
</ruby>

Then you can't update the @node.nested@ 
<ruby>
node.nested[:some_property] = 'some value'
node.nested.nested << other_node
node.nested.save
</ruby>

Instead you must use a temporary variable, like this:

<ruby>
tmp = node.nested
tmp[:some_property] = 'some value'
tmp.nested << other_node
tmp.save
</ruby>

The reason is that the @node.nested@ creates a new instance of a
wrapped node.

However, the following will work:
<ruby>
n = Person.create
n.nested = Person.create
n.nested[:name] = 'foo'
n.save

n.nested[:name] # => 'foo'
</ruby>

You do not need a temporary variable in this case since the relationship is not 
persisted yet.
